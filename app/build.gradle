apply plugin: 'com.android.application'

def ENV_VARIABLE_PREFIX = "SIMRA_"
def API_ENDPOINT = "API_ENDPOINT"
def API_SECRET = "API_SECRET"

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "dsp2020.simra.app"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 58
        versionName "58.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // defining the build date
        buildConfigField "long", "BUILD_DATE", System.currentTimeMillis() + "L"
        // define whether this build is a production build
        buildConfigField "boolean", "IS_PRODUCTION", "false"

        // Load `local.properties` (from root) for development configuration
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        }

        buildConfigField "String", API_ENDPOINT, properties.getProperty(API_ENDPOINT) ?: "\"https://localhost:8082/\""
        buildConfigField "String", API_SECRET, properties.getProperty(API_SECRET) ?: "\"mysecret\""

    }
    buildTypes {

        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Allow loading the configuration Settings from environment variables
            buildConfigField "boolean", "IS_PRODUCTION", "true"
            def VAR_API_ENDPOINT = System.getenv(ENV_VARIABLE_PREFIX + API_ENDPOINT)
            if(VAR_API_ENDPOINT != null) {
                buildConfigField "String", API_ENDPOINT, "\"" + VAR_API_ENDPOINT + "\""
            }
            def VAR_API_SECRET = System.getenv(ENV_VARIABLE_PREFIX + API_SECRET)
            if(VAR_API_SECRET != null){
                buildConfigField "String", API_SECRET, "\"" + VAR_API_SECRET + "\""
            }
        }
        debug {
            debuggable true
            applicationIdSuffix ".debug"
        }
        qa {
            initWith buildTypes.release
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion = '29.0.2'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // implementation 'com.google.code.gson:gson:2.8.5'
    // implementation 'org.apache.commons:commons-csv:1.6'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    // implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    // testImplementation 'junit:junit:4.12'
    // androidTestImplementation 'com.android.support.test:runner:1.0.2'
    // androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api 'org.osmdroid:osmdroid-android:6.0.3'
    // api 'org.osmdroid:osmdroid-wms:6.0.3'
    // api 'org.osmdroid:osmdroid-mapsforge:6.0.3'
    // api 'org.osmdroid:osmdroid-geopackage:6.0.3'
    api 'com.github.MKergall:osmbonuspack:6.5.3'
    implementation 'com.github.Jay-Goo:RangeSeekBar:v2.0.4'
    implementation 'com.github.PhilJay:MPAndroidChart:v2.2.4'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.17'
}
